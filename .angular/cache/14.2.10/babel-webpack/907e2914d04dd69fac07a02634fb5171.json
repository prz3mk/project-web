{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, PLATFORM_ID, Component, Inject, Input, Output, HostBinding, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { LinkedList, getBsVer } from 'ngx-bootstrap/utils';\n\nfunction CarouselComponent_ng_container_1_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 7);\n    i0.ɵɵlistener(\"click\", function CarouselComponent_ng_container_1_li_2_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const i_r6 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.selectSlide(i_r6));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const slide_r5 = ctx.$implicit;\n    i0.ɵɵclassProp(\"active\", slide_r5.active === true);\n  }\n}\n\nfunction CarouselComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"ol\", 5);\n    i0.ɵɵtemplate(2, CarouselComponent_ng_container_1_li_2_Template, 1, 2, \"li\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.indicatorsSlides());\n  }\n}\n\nfunction CarouselComponent_ng_container_2_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function CarouselComponent_ng_container_2_button_2_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const i_r11 = restoredCtx.index;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.selectSlide(i_r11));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const slide_r10 = ctx.$implicit;\n    const i_r11 = ctx.index;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"active\", slide_r10.active === true);\n    i0.ɵɵattribute(\"data-bs-target\", \"#carousel\" + ctx_r9.currentId)(\"data-bs-slide-to\", i_r11);\n  }\n}\n\nfunction CarouselComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵtemplate(2, CarouselComponent_ng_container_2_button_2_Template, 1, 4, \"button\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.indicatorsSlides());\n  }\n}\n\nfunction CarouselComponent_a_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 10);\n    i0.ɵɵlistener(\"click\", function CarouselComponent_a_5_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.previousSlide());\n    });\n    i0.ɵɵelement(1, \"span\", 11);\n    i0.ɵɵelementStart(2, \"span\", 12);\n    i0.ɵɵtext(3, \"Previous\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"disabled\", ctx_r2.checkDisabledClass(\"prev\"));\n    i0.ɵɵattribute(\"data-bs-target\", \"#carousel\" + ctx_r2.currentId);\n  }\n}\n\nfunction CarouselComponent_a_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 13);\n    i0.ɵɵlistener(\"click\", function CarouselComponent_a_6_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.nextSlide());\n    });\n    i0.ɵɵelement(1, \"span\", 14);\n    i0.ɵɵelementStart(2, \"span\", 12);\n    i0.ɵɵtext(3, \"Next\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"disabled\", ctx_r3.checkDisabledClass(\"next\"));\n    i0.ɵɵattribute(\"data-bs-target\", \"#carousel\" + ctx_r3.currentId);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"display\": a0\n  };\n};\n\nconst _c1 = [\"*\"];\n\nclass CarouselConfig {\n  constructor() {\n    /* Default interval of auto changing of slides */\n    this.interval = 5000;\n    /* Is loop of auto changing of slides can be paused */\n\n    this.noPause = false;\n    /* Is slides can wrap from the last to the first slide */\n\n    this.noWrap = false;\n    /* Show carousel-indicators */\n\n    this.showIndicators = true;\n    /* Slides can be paused on focus */\n\n    this.pauseOnFocus = false;\n    /* If `true` - carousel indicators indicate slides chunks works ONLY if singleSlideOffset = FALSE */\n\n    this.indicatorsByChunk = false;\n    /* If value more then 1 — carousel works in multilist mode */\n\n    this.itemsPerSlide = 1;\n    /* If `true` — carousel shifts by one element. By default carousel shifts by number\n      of visible elements (itemsPerSlide field) */\n\n    this.singleSlideOffset = false;\n  }\n\n}\n\nCarouselConfig.ɵfac = function CarouselConfig_Factory(t) {\n  return new (t || CarouselConfig)();\n};\n\nCarouselConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CarouselConfig,\n  factory: CarouselConfig.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CarouselConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Returns the index of the last element in the array where predicate is true, and -1\n * otherwise.\n * @param array The source array to search in\n * @param predicate find calls predicate once for each element of the array, in descending\n * order, until it finds one where predicate returns true. If such an element is found,\n * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.\n */\n\n\nfunction findLastIndex(array, predicate) {\n  let l = array.length;\n\n  while (l--) {\n    if (predicate(array[l], l, array)) {\n      return l;\n    }\n  }\n\n  return -1;\n}\n\nfunction chunkByNumber(array, size) {\n  const out = [];\n  const n = Math.ceil(array.length / size);\n  let i = 0;\n\n  while (i < n) {\n    const chunk = array.splice(0, i === n - 1 && size < array.length ? array.length : size);\n    out.push(chunk);\n    i++;\n  }\n\n  return out;\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]';\n}\n/***\n * pause (not yet supported) (?string='hover') - event group name which pauses\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\n * carousel will not react to keyboard events\n * note: swiping not yet supported\n */\n\n\nvar Direction;\n\n(function (Direction) {\n  Direction[Direction[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  Direction[Direction[\"NEXT\"] = 1] = \"NEXT\";\n  Direction[Direction[\"PREV\"] = 2] = \"PREV\";\n})(Direction || (Direction = {}));\n\nlet _currentId = 1;\n/**\n * Base element to create carousel\n */\n\nclass CarouselComponent {\n  constructor(config, ngZone, platformId) {\n    this.ngZone = ngZone;\n    this.platformId = platformId;\n    /* If `true` — carousel will not cycle continuously and will have hard stops (prevent looping) */\n\n    this.noWrap = false;\n    /*  If `true` — will disable pausing on carousel mouse hover */\n\n    this.noPause = false;\n    /*  If `true` — carousel-indicators are visible  */\n\n    this.showIndicators = true;\n    /*  If `true` - autoplay will be stopped on focus */\n\n    this.pauseOnFocus = false;\n    /* If `true` - carousel indicators indicate slides chunks\n       works ONLY if singleSlideOffset = FALSE */\n\n    this.indicatorsByChunk = false;\n    /* If value more then 1 — carousel works in multilist mode */\n\n    this.itemsPerSlide = 1;\n    /* If `true` — carousel shifts by one element. By default carousel shifts by number\n       of visible elements (itemsPerSlide field) */\n\n    this.singleSlideOffset = false;\n    /** Turn on/off animation. Animation doesn't work for multilist carousel */\n\n    this.isAnimated = false;\n    /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\n\n    this.activeSlideChange = new EventEmitter(false);\n    /** Will be emitted when active slides has been changed in multilist mode */\n\n    this.slideRangeChange = new EventEmitter();\n    /* Index to start display slides from it */\n\n    this.startFromIndex = 0;\n    this._interval = 5000;\n    this._slides = new LinkedList();\n    this._currentVisibleSlidesIndex = 0;\n    this.isPlaying = false;\n    this.destroyed = false;\n    this.currentId = 0;\n\n    this.getActive = slide => slide.active;\n\n    this.makeSlidesConsistent = slides => {\n      slides.forEach((slide, index) => slide.item.order = index);\n    };\n\n    Object.assign(this, config);\n    this.currentId = _currentId++;\n  }\n  /** Index of currently displayed slide(started for 0) */\n\n\n  set activeSlide(index) {\n    if (this.multilist) {\n      return;\n    }\n\n    if (isNumber(index)) {\n      this.customActiveSlide = index;\n    }\n\n    if (this._slides.length && index !== this._currentActiveSlide) {\n      this._select(index);\n    }\n  }\n\n  get activeSlide() {\n    return this._currentActiveSlide || 0;\n  }\n  /**\n   * Delay of item cycling in milliseconds. If false, carousel won't cycle\n   * automatically.\n   */\n\n\n  get interval() {\n    return this._interval;\n  }\n\n  set interval(value) {\n    this._interval = value;\n    this.restartTimer();\n  }\n\n  get slides() {\n    return this._slides.toArray();\n  }\n\n  get isFirstSlideVisible() {\n    const indexes = this.getVisibleIndexes();\n\n    if (!indexes || indexes instanceof Array && !indexes.length) {\n      return false;\n    }\n\n    return indexes.includes(0);\n  }\n\n  get isLastSlideVisible() {\n    const indexes = this.getVisibleIndexes();\n\n    if (!indexes || indexes instanceof Array && !indexes.length) {\n      return false;\n    }\n\n    return indexes.includes(this._slides.length - 1);\n  }\n\n  get _bsVer() {\n    return getBsVer();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      if (this.singleSlideOffset) {\n        this.indicatorsByChunk = false;\n      }\n\n      if (this.multilist) {\n        this._chunkedSlides = chunkByNumber(this.mapSlidesAndIndexes(), this.itemsPerSlide);\n        this.selectInitialSlides();\n      }\n\n      if (this.customActiveSlide && !this.multilist) {\n        this._select(this.customActiveSlide);\n      }\n    }, 0);\n  }\n\n  ngOnDestroy() {\n    this.destroyed = true;\n  }\n  /**\n   * Adds new slide. If this slide is first in collection - set it as active\n   * and starts auto changing\n   * @param slide\n   */\n\n\n  addSlide(slide) {\n    this._slides.add(slide);\n\n    if (this.multilist && this._slides.length <= this.itemsPerSlide) {\n      slide.active = true;\n    }\n\n    if (!this.multilist && this.isAnimated) {\n      slide.isAnimated = true;\n    }\n\n    if (!this.multilist && this._slides.length === 1) {\n      this._currentActiveSlide = undefined;\n\n      if (!this.customActiveSlide) {\n        this.activeSlide = 0;\n      }\n\n      this.play();\n    }\n\n    if (this.multilist && this._slides.length > this.itemsPerSlide) {\n      this.play();\n    }\n  }\n  /**\n   * Removes specified slide. If this slide is active - will roll to another\n   * slide\n   * @param slide\n   */\n\n\n  removeSlide(slide) {\n    const remIndex = this._slides.indexOf(slide);\n\n    if (this._currentActiveSlide === remIndex) {\n      // removing of active slide\n      let nextSlideIndex;\n\n      if (this._slides.length > 1) {\n        // if this slide last - will roll to first slide, if noWrap flag is\n        // FALSE or to previous, if noWrap is TRUE in case, if this slide in\n        // middle of collection, index of next slide is same to removed\n        nextSlideIndex = !this.isLast(remIndex) ? remIndex : this.noWrap ? remIndex - 1 : 0;\n      }\n\n      this._slides.remove(remIndex); // prevents exception with changing some value after checking\n\n\n      setTimeout(() => {\n        this._select(nextSlideIndex);\n      }, 0);\n    } else {\n      this._slides.remove(remIndex);\n\n      const currentSlideIndex = this.getCurrentSlideIndex();\n      setTimeout(() => {\n        // after removing, need to actualize index of current active slide\n        this._currentActiveSlide = currentSlideIndex;\n        this.activeSlideChange.emit(this._currentActiveSlide);\n      }, 0);\n    }\n  }\n\n  nextSlideFromInterval(force = false) {\n    this.move(Direction.NEXT, force);\n  }\n  /**\n   * Rolling to next slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n\n\n  nextSlide(force = false) {\n    if (this.isPlaying) {\n      this.restartTimer();\n    }\n\n    this.move(Direction.NEXT, force);\n  }\n  /**\n   * Rolling to previous slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n\n\n  previousSlide(force = false) {\n    if (this.isPlaying) {\n      this.restartTimer();\n    }\n\n    this.move(Direction.PREV, force);\n  }\n\n  getFirstVisibleIndex() {\n    return this.slides.findIndex(this.getActive);\n  }\n\n  getLastVisibleIndex() {\n    return findLastIndex(this.slides, this.getActive);\n  }\n\n  move(direction, force = false) {\n    const firstVisibleIndex = this.getFirstVisibleIndex();\n    const lastVisibleIndex = this.getLastVisibleIndex();\n\n    if (this.noWrap) {\n      if (direction === Direction.NEXT && this.isLast(lastVisibleIndex) || direction === Direction.PREV && firstVisibleIndex === 0) {\n        return;\n      }\n    }\n\n    if (!this.multilist) {\n      this.activeSlide = this.findNextSlideIndex(direction, force) || 0;\n    } else {\n      this.moveMultilist(direction);\n    }\n  }\n  /**\n   * Swith slides by enter, space and arrows keys\n   * @internal\n   */\n\n\n  keydownPress(event) {\n    if (event.keyCode === 13 || event.key === 'Enter' || event.keyCode === 32 || event.key === 'Space') {\n      this.nextSlide();\n      event.preventDefault();\n      return;\n    }\n\n    if (event.keyCode === 37 || event.key === 'LeftArrow') {\n      this.previousSlide();\n      return;\n    }\n\n    if (event.keyCode === 39 || event.key === 'RightArrow') {\n      this.nextSlide();\n      return;\n    }\n  }\n  /**\n   * Play on mouse leave\n   * @internal\n   */\n\n\n  onMouseLeave() {\n    if (!this.pauseOnFocus) {\n      this.play();\n    }\n  }\n  /**\n   * Play on mouse up\n   * @internal\n   */\n\n\n  onMouseUp() {\n    if (!this.pauseOnFocus) {\n      this.play();\n    }\n  }\n  /**\n   * When slides on focus autoplay is stopped(optional)\n   * @internal\n   */\n\n\n  pauseFocusIn() {\n    if (this.pauseOnFocus) {\n      this.isPlaying = false;\n      this.resetTimer();\n    }\n  }\n  /**\n   * When slides out of focus autoplay is started\n   * @internal\n   */\n\n\n  pauseFocusOut() {\n    this.play();\n  }\n  /**\n   * Rolling to specified slide\n   * @param index: {number} index of slide, which must be shown\n   */\n\n\n  selectSlide(index) {\n    if (this.isPlaying) {\n      this.restartTimer();\n    }\n\n    if (!this.multilist) {\n      this.activeSlide = this.indicatorsByChunk ? index * this.itemsPerSlide : index;\n    } else {\n      this.selectSlideRange(this.indicatorsByChunk ? index * this.itemsPerSlide : index);\n    }\n  }\n  /**\n   * Starts a auto changing of slides\n   */\n\n\n  play() {\n    if (!this.isPlaying) {\n      this.isPlaying = true;\n      this.restartTimer();\n    }\n  }\n  /**\n   * Stops a auto changing of slides\n   */\n\n\n  pause() {\n    if (!this.noPause) {\n      this.isPlaying = false;\n      this.resetTimer();\n    }\n  }\n  /**\n   * Finds and returns index of currently displayed slide\n   */\n\n\n  getCurrentSlideIndex() {\n    return this._slides.findIndex(this.getActive);\n  }\n  /**\n   * Defines, whether the specified index is last in collection\n   * @param index\n   */\n\n\n  isLast(index) {\n    return index + 1 >= this._slides.length;\n  }\n  /**\n   * Defines, whether the specified index is first in collection\n   * @param index\n   */\n\n\n  isFirst(index) {\n    return index === 0;\n  }\n\n  indicatorsSlides() {\n    return this.slides.filter((slide, index) => !this.indicatorsByChunk || index % this.itemsPerSlide === 0);\n  }\n\n  selectInitialSlides() {\n    const startIndex = this.startFromIndex <= this._slides.length ? this.startFromIndex : 0;\n    this.hideSlides();\n\n    if (this.singleSlideOffset) {\n      this._slidesWithIndexes = this.mapSlidesAndIndexes();\n\n      if (this._slides.length - startIndex < this.itemsPerSlide) {\n        const slidesToAppend = this._slidesWithIndexes.slice(0, startIndex);\n\n        this._slidesWithIndexes = [...this._slidesWithIndexes, ...slidesToAppend].slice(slidesToAppend.length).slice(0, this.itemsPerSlide);\n      } else {\n        this._slidesWithIndexes = this._slidesWithIndexes.slice(startIndex, startIndex + this.itemsPerSlide);\n      }\n\n      this._slidesWithIndexes.forEach(slide => slide.item.active = true);\n\n      this.makeSlidesConsistent(this._slidesWithIndexes);\n    } else {\n      this.selectRangeByNestedIndex(startIndex);\n    }\n\n    this.slideRangeChange.emit(this.getVisibleIndexes());\n  }\n  /**\n   * Defines next slide index, depending of direction\n   * @param direction: Direction(UNKNOWN|PREV|NEXT)\n   * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\n   *   return undefined if next slide require wrapping\n   */\n\n\n  findNextSlideIndex(direction, force) {\n    let nextSlideIndex = 0;\n\n    if (!force && this.isLast(this.activeSlide) && direction !== Direction.PREV && this.noWrap) {\n      return;\n    }\n\n    switch (direction) {\n      case Direction.NEXT:\n        // if this is last slide, not force, looping is disabled\n        // and need to going forward - select current slide, as a next\n        if (typeof this._currentActiveSlide === 'undefined') {\n          nextSlideIndex = 0;\n          break;\n        }\n\n        if (!this.isLast(this._currentActiveSlide)) {\n          nextSlideIndex = this._currentActiveSlide + 1;\n          break;\n        }\n\n        nextSlideIndex = !force && this.noWrap ? this._currentActiveSlide : 0;\n        break;\n\n      case Direction.PREV:\n        // if this is first slide, not force, looping is disabled\n        // and need to going backward - select current slide, as a next\n        if (typeof this._currentActiveSlide === 'undefined') {\n          nextSlideIndex = 0;\n          break;\n        }\n\n        if (this._currentActiveSlide > 0) {\n          nextSlideIndex = this._currentActiveSlide - 1;\n          break;\n        }\n\n        if (!force && this.noWrap) {\n          nextSlideIndex = this._currentActiveSlide;\n          break;\n        }\n\n        nextSlideIndex = this._slides.length - 1;\n        break;\n\n      default:\n        throw new Error('Unknown direction');\n    }\n\n    return nextSlideIndex;\n  }\n\n  mapSlidesAndIndexes() {\n    return this.slides.slice().map((slide, index) => {\n      return {\n        index,\n        item: slide\n      };\n    });\n  }\n\n  selectSlideRange(index) {\n    if (this.isIndexInRange(index)) {\n      return;\n    }\n\n    this.hideSlides();\n\n    if (!this.singleSlideOffset) {\n      this.selectRangeByNestedIndex(index);\n    } else {\n      const startIndex = this.isIndexOnTheEdges(index) ? index : index - this.itemsPerSlide + 1;\n      const endIndex = this.isIndexOnTheEdges(index) ? index + this.itemsPerSlide : index + 1;\n      this._slidesWithIndexes = this.mapSlidesAndIndexes().slice(startIndex, endIndex);\n      this.makeSlidesConsistent(this._slidesWithIndexes);\n\n      this._slidesWithIndexes.forEach(slide => slide.item.active = true);\n    }\n\n    this.slideRangeChange.emit(this.getVisibleIndexes());\n  }\n\n  selectRangeByNestedIndex(index) {\n    if (!this._chunkedSlides) {\n      return;\n    }\n\n    const selectedRange = this._chunkedSlides.map((slidesList, i) => {\n      return {\n        index: i,\n        list: slidesList\n      };\n    }).find(slidesList => {\n      return slidesList.list.find(slide => slide.index === index) !== undefined;\n    });\n\n    if (!selectedRange) {\n      return;\n    }\n\n    this._currentVisibleSlidesIndex = selectedRange.index;\n\n    this._chunkedSlides[selectedRange.index].forEach(slide => {\n      slide.item.active = true;\n    });\n  }\n\n  isIndexOnTheEdges(index) {\n    return index + 1 - this.itemsPerSlide <= 0 || index + this.itemsPerSlide <= this._slides.length;\n  }\n\n  isIndexInRange(index) {\n    if (this.singleSlideOffset && this._slidesWithIndexes) {\n      const visibleIndexes = this._slidesWithIndexes.map(slide => slide.index);\n\n      return visibleIndexes.indexOf(index) >= 0;\n    }\n\n    return index <= this.getLastVisibleIndex() && index >= this.getFirstVisibleIndex();\n  }\n\n  hideSlides() {\n    this.slides.forEach(slide => slide.active = false);\n  }\n\n  isVisibleSlideListLast() {\n    if (!this._chunkedSlides) {\n      return false;\n    }\n\n    return this._currentVisibleSlidesIndex === this._chunkedSlides.length - 1;\n  }\n\n  isVisibleSlideListFirst() {\n    return this._currentVisibleSlidesIndex === 0;\n  }\n\n  moveSliderByOneItem(direction) {\n    let firstVisibleIndex;\n    let lastVisibleIndex;\n    let indexToHide;\n    let indexToShow;\n\n    if (this.noWrap) {\n      firstVisibleIndex = this.getFirstVisibleIndex();\n      lastVisibleIndex = this.getLastVisibleIndex();\n      indexToHide = direction === Direction.NEXT ? firstVisibleIndex : lastVisibleIndex;\n      indexToShow = direction !== Direction.NEXT ? firstVisibleIndex - 1 : !this.isLast(lastVisibleIndex) ? lastVisibleIndex + 1 : 0;\n\n      const slideToHide = this._slides.get(indexToHide);\n\n      if (slideToHide) {\n        slideToHide.active = false;\n      }\n\n      const slideToShow = this._slides.get(indexToShow);\n\n      if (slideToShow) {\n        slideToShow.active = true;\n      }\n\n      const slidesToReorder = this.mapSlidesAndIndexes().filter(slide => slide.item.active);\n      this.makeSlidesConsistent(slidesToReorder);\n\n      if (this.singleSlideOffset) {\n        this._slidesWithIndexes = slidesToReorder;\n      }\n\n      this.slideRangeChange.emit(this.getVisibleIndexes());\n      return;\n    }\n\n    if (!this._slidesWithIndexes || !this._slidesWithIndexes[0]) {\n      return;\n    }\n\n    let index;\n    firstVisibleIndex = this._slidesWithIndexes[0].index;\n    lastVisibleIndex = this._slidesWithIndexes[this._slidesWithIndexes.length - 1].index;\n\n    if (direction === Direction.NEXT) {\n      this._slidesWithIndexes.shift();\n\n      index = this.isLast(lastVisibleIndex) ? 0 : lastVisibleIndex + 1;\n\n      const item = this._slides.get(index);\n\n      if (item) {\n        this._slidesWithIndexes.push({\n          index,\n          item\n        });\n      }\n    } else {\n      this._slidesWithIndexes.pop();\n\n      index = this.isFirst(firstVisibleIndex) ? this._slides.length - 1 : firstVisibleIndex - 1;\n\n      const item = this._slides.get(index);\n\n      if (item) {\n        this._slidesWithIndexes = [{\n          index,\n          item\n        }, ...this._slidesWithIndexes];\n      }\n    }\n\n    this.hideSlides();\n\n    this._slidesWithIndexes.forEach(slide => slide.item.active = true);\n\n    this.makeSlidesConsistent(this._slidesWithIndexes);\n    this.slideRangeChange.emit(this._slidesWithIndexes.map(slide => slide.index));\n  }\n\n  moveMultilist(direction) {\n    if (this.singleSlideOffset) {\n      this.moveSliderByOneItem(direction);\n    } else {\n      this.hideSlides();\n\n      if (this.noWrap) {\n        this._currentVisibleSlidesIndex = direction === Direction.NEXT ? this._currentVisibleSlidesIndex + 1 : this._currentVisibleSlidesIndex - 1;\n      } else if (direction === Direction.NEXT) {\n        this._currentVisibleSlidesIndex = this.isVisibleSlideListLast() ? 0 : this._currentVisibleSlidesIndex + 1;\n      } else {\n        if (this.isVisibleSlideListFirst()) {\n          this._currentVisibleSlidesIndex = this._chunkedSlides ? this._chunkedSlides.length - 1 : 0;\n        } else {\n          this._currentVisibleSlidesIndex = this._currentVisibleSlidesIndex - 1;\n        }\n      }\n\n      if (this._chunkedSlides) {\n        this._chunkedSlides[this._currentVisibleSlidesIndex].forEach(slide => slide.item.active = true);\n      }\n\n      this.slideRangeChange.emit(this.getVisibleIndexes());\n    }\n  }\n\n  getVisibleIndexes() {\n    if (!this.singleSlideOffset && this._chunkedSlides) {\n      return this._chunkedSlides[this._currentVisibleSlidesIndex].map(slide => slide.index);\n    }\n\n    if (this._slidesWithIndexes) {\n      return this._slidesWithIndexes.map(slide => slide.index);\n    }\n  }\n  /**\n   * Sets a slide, which specified through index, as active\n   * @param index\n   */\n\n\n  _select(index) {\n    if (isNaN(index)) {\n      this.pause();\n      return;\n    }\n\n    if (!this.multilist && typeof this._currentActiveSlide !== 'undefined') {\n      const currentSlide = this._slides.get(this._currentActiveSlide);\n\n      if (typeof currentSlide !== 'undefined') {\n        currentSlide.active = false;\n      }\n    }\n\n    const nextSlide = this._slides.get(index);\n\n    if (typeof nextSlide !== 'undefined') {\n      this._currentActiveSlide = index;\n      nextSlide.active = true;\n      this.activeSlide = index;\n      this.activeSlideChange.emit(index);\n    }\n  }\n  /**\n   * Starts loop of auto changing of slides\n   */\n\n\n  restartTimer() {\n    this.resetTimer();\n    const interval = +this.interval;\n\n    if (!isNaN(interval) && interval > 0 && isPlatformBrowser(this.platformId)) {\n      this.currentInterval = this.ngZone.runOutsideAngular(() => {\n        return window.setInterval(() => {\n          const nInterval = +this.interval;\n          this.ngZone.run(() => {\n            if (this.isPlaying && !isNaN(this.interval) && nInterval > 0 && this.slides.length) {\n              this.nextSlideFromInterval();\n            } else {\n              this.pause();\n            }\n          });\n        }, interval);\n      });\n    }\n  }\n\n  get multilist() {\n    return this.itemsPerSlide > 1;\n  }\n  /**\n   * Stops loop of auto changing of slides\n   */\n\n\n  resetTimer() {\n    if (this.currentInterval) {\n      clearInterval(this.currentInterval);\n      this.currentInterval = void 0;\n    }\n  }\n\n  checkDisabledClass(buttonType) {\n    if (buttonType === 'prev') {\n      return this.activeSlide === 0 && this.noWrap && !this.multilist || this.isFirstSlideVisible && this.noWrap && this.multilist;\n    }\n\n    return this.isLast(this.activeSlide) && this.noWrap && !this.multilist || this.isLastSlideVisible && this.noWrap && this.multilist;\n  }\n\n}\n\nCarouselComponent.ɵfac = function CarouselComponent_Factory(t) {\n  return new (t || CarouselComponent)(i0.ɵɵdirectiveInject(CarouselConfig), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nCarouselComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CarouselComponent,\n  selectors: [[\"carousel\"]],\n  inputs: {\n    noWrap: \"noWrap\",\n    noPause: \"noPause\",\n    showIndicators: \"showIndicators\",\n    pauseOnFocus: \"pauseOnFocus\",\n    indicatorsByChunk: \"indicatorsByChunk\",\n    itemsPerSlide: \"itemsPerSlide\",\n    singleSlideOffset: \"singleSlideOffset\",\n    isAnimated: \"isAnimated\",\n    activeSlide: \"activeSlide\",\n    startFromIndex: \"startFromIndex\",\n    interval: \"interval\"\n  },\n  outputs: {\n    activeSlideChange: \"activeSlideChange\",\n    slideRangeChange: \"slideRangeChange\"\n  },\n  ngContentSelectors: _c1,\n  decls: 7,\n  vars: 8,\n  consts: [[\"tabindex\", \"0\", 1, \"carousel\", \"slide\", 3, \"id\", \"mouseenter\", \"mouseleave\", \"mouseup\", \"keydown\", \"focusin\", \"focusout\"], [4, \"ngIf\"], [1, \"carousel-inner\", 3, \"ngStyle\"], [\"class\", \"left carousel-control carousel-control-prev\", \"href\", \"javascript:void(0);\", \"tabindex\", \"0\", \"role\", \"button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"class\", \"right carousel-control carousel-control-next\", \"href\", \"javascript:void(0);\", \"tabindex\", \"0\", \"role\", \"button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [1, \"carousel-indicators\"], [3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [\"type\", \"button\", \"aria-current\", \"true\", 3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", \"aria-current\", \"true\", 3, \"click\"], [\"href\", \"javascript:void(0);\", \"tabindex\", \"0\", \"role\", \"button\", 1, \"left\", \"carousel-control\", \"carousel-control-prev\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"icon-prev\", \"carousel-control-prev-icon\"], [1, \"sr-only\", \"visually-hidden\"], [\"href\", \"javascript:void(0);\", \"tabindex\", \"0\", \"role\", \"button\", 1, \"right\", \"carousel-control\", \"carousel-control-next\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"icon-next\", \"carousel-control-next-icon\"]],\n  template: function CarouselComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"mouseenter\", function CarouselComponent_Template_div_mouseenter_0_listener() {\n        return ctx.pause();\n      })(\"mouseleave\", function CarouselComponent_Template_div_mouseleave_0_listener() {\n        return ctx.onMouseLeave();\n      })(\"mouseup\", function CarouselComponent_Template_div_mouseup_0_listener() {\n        return ctx.onMouseUp();\n      })(\"keydown\", function CarouselComponent_Template_div_keydown_0_listener($event) {\n        return ctx.keydownPress($event);\n      })(\"focusin\", function CarouselComponent_Template_div_focusin_0_listener() {\n        return ctx.pauseFocusIn();\n      })(\"focusout\", function CarouselComponent_Template_div_focusout_0_listener() {\n        return ctx.pauseFocusOut();\n      });\n      i0.ɵɵtemplate(1, CarouselComponent_ng_container_1_Template, 3, 1, \"ng-container\", 1);\n      i0.ɵɵtemplate(2, CarouselComponent_ng_container_2_Template, 3, 1, \"ng-container\", 1);\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵprojection(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, CarouselComponent_a_5_Template, 4, 3, \"a\", 3);\n      i0.ɵɵtemplate(6, CarouselComponent_a_6_Template, 4, 3, \"a\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", \"carousel\" + ctx.currentId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx._bsVer.isBs5 && ctx.showIndicators && ctx.slides.length > 1);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx._bsVer.isBs5 && ctx.showIndicators && ctx.slides.length > 1);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(6, _c0, ctx.multilist ? \"flex\" : \"block\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.slides.length > 1);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.slides.length > 1);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i2.NgStyle],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CarouselComponent, [{\n    type: Component,\n    args: [{\n      selector: 'carousel',\n      template: \"<div (mouseenter)=\\\"pause()\\\"\\n     (mouseleave)=\\\"onMouseLeave()\\\"\\n     (mouseup)=\\\"onMouseUp()\\\"\\n     (keydown)=\\\"keydownPress($event)\\\"\\n     (focusin)=\\\"pauseFocusIn()\\\"\\n     (focusout)=\\\"pauseFocusOut()\\\"\\n     [id]=\\\"'carousel' + currentId\\\"\\n     class=\\\"carousel slide\\\" tabindex=\\\"0\\\">\\n  <ng-container *ngIf=\\\"!_bsVer.isBs5 && showIndicators && slides.length > 1\\\">\\n    <ol class=\\\"carousel-indicators\\\">\\n      <li *ngFor=\\\"let slide of indicatorsSlides(); let i = index;\\\"\\n          [class.active]=\\\"slide.active === true\\\"\\n          (click)=\\\"selectSlide(i)\\\">\\n      </li>\\n    </ol>\\n  </ng-container>\\n  <ng-container *ngIf=\\\"_bsVer.isBs5 && showIndicators && slides.length > 1\\\">\\n    <div class=\\\"carousel-indicators\\\">\\n      <button\\n        *ngFor=\\\"let slide of indicatorsSlides(); let i = index;\\\"\\n        [class.active]=\\\"slide.active === true\\\"\\n        (click)=\\\"selectSlide(i)\\\"\\n        type=\\\"button\\\"\\n        [attr.data-bs-target]=\\\"'#carousel' + currentId\\\"\\n        [attr.data-bs-slide-to]=\\\"i\\\" aria-current=\\\"true\\\"\\n      >\\n      </button>\\n    </div>\\n  </ng-container>\\n  <div class=\\\"carousel-inner\\\" [ngStyle]=\\\"{'display': multilist ? 'flex' : 'block'}\\\">\\n    <ng-content></ng-content>\\n  </div>\\n  <a class=\\\"left carousel-control carousel-control-prev\\\"\\n     href=\\\"javascript:void(0);\\\"\\n     [class.disabled]=\\\"checkDisabledClass('prev')\\\"\\n     [attr.data-bs-target]=\\\"'#carousel' + currentId\\\"\\n     *ngIf=\\\"slides.length > 1\\\"\\n     (click)=\\\"previousSlide()\\\"\\n     tabindex=\\\"0\\\" role=\\\"button\\\">\\n    <span class=\\\"icon-prev carousel-control-prev-icon\\\" aria-hidden=\\\"true\\\"></span>\\n    <span class=\\\"sr-only visually-hidden\\\">Previous</span>\\n  </a>\\n\\n  <a class=\\\"right carousel-control carousel-control-next\\\"\\n     href=\\\"javascript:void(0);\\\"\\n     *ngIf=\\\"slides.length > 1\\\"\\n     (click)=\\\"nextSlide()\\\"\\n     [class.disabled]=\\\"checkDisabledClass('next')\\\"\\n     [attr.data-bs-target]=\\\"'#carousel' + currentId\\\"\\n     tabindex=\\\"0\\\" role=\\\"button\\\">\\n    <span class=\\\"icon-next carousel-control-next-icon\\\" aria-hidden=\\\"true\\\"></span>\\n    <span class=\\\"sr-only visually-hidden\\\">Next</span>\\n  </a>\\n</div>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: CarouselConfig\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    noWrap: [{\n      type: Input\n    }],\n    noPause: [{\n      type: Input\n    }],\n    showIndicators: [{\n      type: Input\n    }],\n    pauseOnFocus: [{\n      type: Input\n    }],\n    indicatorsByChunk: [{\n      type: Input\n    }],\n    itemsPerSlide: [{\n      type: Input\n    }],\n    singleSlideOffset: [{\n      type: Input\n    }],\n    isAnimated: [{\n      type: Input\n    }],\n    activeSlideChange: [{\n      type: Output\n    }],\n    slideRangeChange: [{\n      type: Output\n    }],\n    activeSlide: [{\n      type: Input\n    }],\n    startFromIndex: [{\n      type: Input\n    }],\n    interval: [{\n      type: Input\n    }]\n  });\n})();\n\nclass SlideComponent {\n  constructor(carousel) {\n    /** Is current slide active */\n    this.active = false;\n    this.itemWidth = '100%';\n    this.order = 0;\n    this.isAnimated = false;\n    /** Wraps element by appropriate CSS classes */\n\n    this.addClass = true;\n    this.multilist = false;\n    this.carousel = carousel;\n  }\n  /** Fires changes in container collection after adding a new slide instance */\n\n\n  ngOnInit() {\n    this.carousel.addSlide(this);\n    this.itemWidth = `${100 / this.carousel.itemsPerSlide}%`;\n    this.multilist = this.carousel?.itemsPerSlide > 1;\n  }\n  /** Fires changes in container collection after removing of this slide instance */\n\n\n  ngOnDestroy() {\n    this.carousel.removeSlide(this);\n  }\n\n}\n\nSlideComponent.ɵfac = function SlideComponent_Factory(t) {\n  return new (t || SlideComponent)(i0.ɵɵdirectiveInject(CarouselComponent));\n};\n\nSlideComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SlideComponent,\n  selectors: [[\"slide\"]],\n  hostVars: 15,\n  hostBindings: function SlideComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-hidden\", !ctx.active);\n      i0.ɵɵstyleProp(\"width\", ctx.itemWidth)(\"order\", ctx.order);\n      i0.ɵɵclassProp(\"multilist-margin\", ctx.multilist)(\"active\", ctx.active)(\"carousel-animation\", ctx.isAnimated)(\"item\", ctx.addClass)(\"carousel-item\", ctx.addClass);\n    }\n  },\n  inputs: {\n    active: \"active\"\n  },\n  ngContentSelectors: _c1,\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"item\"]],\n  template: function SlideComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"active\", ctx.active);\n    }\n  },\n  styles: [\".carousel-animation[_nghost-%COMP%]{transition:opacity .6s ease,visibility .6s ease;float:left}.carousel-animation.active[_nghost-%COMP%]{opacity:1;visibility:visible}.carousel-animation[_nghost-%COMP%]:not(.active){display:block;position:absolute;opacity:0;visibility:hidden}.multilist-margin[_nghost-%COMP%]{margin-right:auto}.carousel-item[_nghost-%COMP%]{perspective:1000px}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SlideComponent, [{\n    type: Component,\n    args: [{\n      selector: 'slide',\n      template: `\n    <div [class.active]=\"active\" class=\"item\">\n      <ng-content></ng-content>\n    </div>\n  `,\n      host: {\n        '[attr.aria-hidden]': '!active',\n        '[class.multilist-margin]': 'multilist'\n      },\n      styles: [\":host.carousel-animation{transition:opacity .6s ease,visibility .6s ease;float:left}:host.carousel-animation.active{opacity:1;visibility:visible}:host.carousel-animation:not(.active){display:block;position:absolute;opacity:0;visibility:hidden}:host.multilist-margin{margin-right:auto}:host.carousel-item{perspective:1000px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: CarouselComponent\n    }];\n  }, {\n    active: [{\n      type: HostBinding,\n      args: ['class.active']\n    }, {\n      type: Input\n    }],\n    itemWidth: [{\n      type: HostBinding,\n      args: ['style.width']\n    }],\n    order: [{\n      type: HostBinding,\n      args: ['style.order']\n    }],\n    isAnimated: [{\n      type: HostBinding,\n      args: ['class.carousel-animation']\n    }],\n    addClass: [{\n      type: HostBinding,\n      args: ['class.item']\n    }, {\n      type: HostBinding,\n      args: ['class.carousel-item']\n    }]\n  });\n})();\n\nclass CarouselModule {\n  static forRoot() {\n    return {\n      ngModule: CarouselModule,\n      providers: []\n    };\n  }\n\n}\n\nCarouselModule.ɵfac = function CarouselModule_Factory(t) {\n  return new (t || CarouselModule)();\n};\n\nCarouselModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CarouselModule\n});\nCarouselModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CarouselModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [SlideComponent, CarouselComponent],\n      exports: [SlideComponent, CarouselComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CarouselComponent, CarouselConfig, CarouselModule, SlideComponent };","map":{"version":3,"names":["i0","Injectable","EventEmitter","PLATFORM_ID","Component","Inject","Input","Output","HostBinding","NgModule","i2","isPlatformBrowser","CommonModule","LinkedList","getBsVer","CarouselConfig","constructor","interval","noPause","noWrap","showIndicators","pauseOnFocus","indicatorsByChunk","itemsPerSlide","singleSlideOffset","ɵfac","ɵprov","type","args","providedIn","findLastIndex","array","predicate","l","length","chunkByNumber","size","out","n","Math","ceil","i","chunk","splice","push","isNumber","value","Object","prototype","toString","call","Direction","_currentId","CarouselComponent","config","ngZone","platformId","isAnimated","activeSlideChange","slideRangeChange","startFromIndex","_interval","_slides","_currentVisibleSlidesIndex","isPlaying","destroyed","currentId","getActive","slide","active","makeSlidesConsistent","slides","forEach","index","item","order","assign","activeSlide","multilist","customActiveSlide","_currentActiveSlide","_select","restartTimer","toArray","isFirstSlideVisible","indexes","getVisibleIndexes","Array","includes","isLastSlideVisible","_bsVer","ngAfterViewInit","setTimeout","_chunkedSlides","mapSlidesAndIndexes","selectInitialSlides","ngOnDestroy","addSlide","add","undefined","play","removeSlide","remIndex","indexOf","nextSlideIndex","isLast","remove","currentSlideIndex","getCurrentSlideIndex","emit","nextSlideFromInterval","force","move","NEXT","nextSlide","previousSlide","PREV","getFirstVisibleIndex","findIndex","getLastVisibleIndex","direction","firstVisibleIndex","lastVisibleIndex","findNextSlideIndex","moveMultilist","keydownPress","event","keyCode","key","preventDefault","onMouseLeave","onMouseUp","pauseFocusIn","resetTimer","pauseFocusOut","selectSlide","selectSlideRange","pause","isFirst","indicatorsSlides","filter","startIndex","hideSlides","_slidesWithIndexes","slidesToAppend","slice","selectRangeByNestedIndex","Error","map","isIndexInRange","isIndexOnTheEdges","endIndex","selectedRange","slidesList","list","find","visibleIndexes","isVisibleSlideListLast","isVisibleSlideListFirst","moveSliderByOneItem","indexToHide","indexToShow","slideToHide","get","slideToShow","slidesToReorder","shift","pop","isNaN","currentSlide","currentInterval","runOutsideAngular","window","setInterval","nInterval","run","clearInterval","checkDisabledClass","buttonType","NgZone","ɵcmp","NgForOf","NgIf","NgStyle","selector","template","decorators","SlideComponent","carousel","itemWidth","addClass","ngOnInit","host","styles","CarouselModule","forRoot","ngModule","providers","ɵmod","ɵinj","imports","declarations","exports"],"sources":["C:/Users/quesh/Desktop/trybus/web/node_modules/ngx-bootstrap/carousel/fesm2020/ngx-bootstrap-carousel.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, PLATFORM_ID, Component, Inject, Input, Output, HostBinding, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { LinkedList, getBsVer } from 'ngx-bootstrap/utils';\n\nclass CarouselConfig {\n    constructor() {\n        /* Default interval of auto changing of slides */\n        this.interval = 5000;\n        /* Is loop of auto changing of slides can be paused */\n        this.noPause = false;\n        /* Is slides can wrap from the last to the first slide */\n        this.noWrap = false;\n        /* Show carousel-indicators */\n        this.showIndicators = true;\n        /* Slides can be paused on focus */\n        this.pauseOnFocus = false;\n        /* If `true` - carousel indicators indicate slides chunks works ONLY if singleSlideOffset = FALSE */\n        this.indicatorsByChunk = false;\n        /* If value more then 1 — carousel works in multilist mode */\n        this.itemsPerSlide = 1;\n        /* If `true` — carousel shifts by one element. By default carousel shifts by number\n          of visible elements (itemsPerSlide field) */\n        this.singleSlideOffset = false;\n    }\n}\nCarouselConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: CarouselConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nCarouselConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: CarouselConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: CarouselConfig, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\n/**\n * Returns the index of the last element in the array where predicate is true, and -1\n * otherwise.\n * @param array The source array to search in\n * @param predicate find calls predicate once for each element of the array, in descending\n * order, until it finds one where predicate returns true. If such an element is found,\n * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.\n */\nfunction findLastIndex(array, predicate) {\n    let l = array.length;\n    while (l--) {\n        if (predicate(array[l], l, array)) {\n            return l;\n        }\n    }\n    return -1;\n}\nfunction chunkByNumber(array, size) {\n    const out = [];\n    const n = Math.ceil((array.length) / size);\n    let i = 0;\n    while (i < n) {\n        const chunk = array.splice(0, (i === n - 1) && size < array.length ? array.length : size);\n        out.push(chunk);\n        i++;\n    }\n    return out;\n}\nfunction isNumber(value) {\n    return typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]';\n}\n\n/***\n * pause (not yet supported) (?string='hover') - event group name which pauses\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\n * carousel will not react to keyboard events\n * note: swiping not yet supported\n */\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    Direction[Direction[\"NEXT\"] = 1] = \"NEXT\";\n    Direction[Direction[\"PREV\"] = 2] = \"PREV\";\n})(Direction || (Direction = {}));\nlet _currentId = 1;\n/**\n * Base element to create carousel\n */\nclass CarouselComponent {\n    constructor(config, ngZone, platformId) {\n        this.ngZone = ngZone;\n        this.platformId = platformId;\n        /* If `true` — carousel will not cycle continuously and will have hard stops (prevent looping) */\n        this.noWrap = false;\n        /*  If `true` — will disable pausing on carousel mouse hover */\n        this.noPause = false;\n        /*  If `true` — carousel-indicators are visible  */\n        this.showIndicators = true;\n        /*  If `true` - autoplay will be stopped on focus */\n        this.pauseOnFocus = false;\n        /* If `true` - carousel indicators indicate slides chunks\n           works ONLY if singleSlideOffset = FALSE */\n        this.indicatorsByChunk = false;\n        /* If value more then 1 — carousel works in multilist mode */\n        this.itemsPerSlide = 1;\n        /* If `true` — carousel shifts by one element. By default carousel shifts by number\n           of visible elements (itemsPerSlide field) */\n        this.singleSlideOffset = false;\n        /** Turn on/off animation. Animation doesn't work for multilist carousel */\n        this.isAnimated = false;\n        /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\n        this.activeSlideChange = new EventEmitter(false);\n        /** Will be emitted when active slides has been changed in multilist mode */\n        this.slideRangeChange = new EventEmitter();\n        /* Index to start display slides from it */\n        this.startFromIndex = 0;\n        this._interval = 5000;\n        this._slides = new LinkedList();\n        this._currentVisibleSlidesIndex = 0;\n        this.isPlaying = false;\n        this.destroyed = false;\n        this.currentId = 0;\n        this.getActive = (slide) => slide.active;\n        this.makeSlidesConsistent = (slides) => {\n            slides.forEach((slide, index) => slide.item.order = index);\n        };\n        Object.assign(this, config);\n        this.currentId = _currentId++;\n    }\n    /** Index of currently displayed slide(started for 0) */\n    set activeSlide(index) {\n        if (this.multilist) {\n            return;\n        }\n        if (isNumber(index)) {\n            this.customActiveSlide = index;\n        }\n        if (this._slides.length && index !== this._currentActiveSlide) {\n            this._select(index);\n        }\n    }\n    get activeSlide() {\n        return this._currentActiveSlide || 0;\n    }\n    /**\n     * Delay of item cycling in milliseconds. If false, carousel won't cycle\n     * automatically.\n     */\n    get interval() {\n        return this._interval;\n    }\n    set interval(value) {\n        this._interval = value;\n        this.restartTimer();\n    }\n    get slides() {\n        return this._slides.toArray();\n    }\n    get isFirstSlideVisible() {\n        const indexes = this.getVisibleIndexes();\n        if (!indexes || (indexes instanceof Array && !indexes.length)) {\n            return false;\n        }\n        return indexes.includes(0);\n    }\n    get isLastSlideVisible() {\n        const indexes = this.getVisibleIndexes();\n        if (!indexes || (indexes instanceof Array && !indexes.length)) {\n            return false;\n        }\n        return indexes.includes(this._slides.length - 1);\n    }\n    get _bsVer() {\n        return getBsVer();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            if (this.singleSlideOffset) {\n                this.indicatorsByChunk = false;\n            }\n            if (this.multilist) {\n                this._chunkedSlides = chunkByNumber(this.mapSlidesAndIndexes(), this.itemsPerSlide);\n                this.selectInitialSlides();\n            }\n            if (this.customActiveSlide && !this.multilist) {\n                this._select(this.customActiveSlide);\n            }\n        }, 0);\n    }\n    ngOnDestroy() {\n        this.destroyed = true;\n    }\n    /**\n     * Adds new slide. If this slide is first in collection - set it as active\n     * and starts auto changing\n     * @param slide\n     */\n    addSlide(slide) {\n        this._slides.add(slide);\n        if (this.multilist && this._slides.length <= this.itemsPerSlide) {\n            slide.active = true;\n        }\n        if (!this.multilist && this.isAnimated) {\n            slide.isAnimated = true;\n        }\n        if (!this.multilist && this._slides.length === 1) {\n            this._currentActiveSlide = undefined;\n            if (!this.customActiveSlide) {\n                this.activeSlide = 0;\n            }\n            this.play();\n        }\n        if (this.multilist && this._slides.length > this.itemsPerSlide) {\n            this.play();\n        }\n    }\n    /**\n     * Removes specified slide. If this slide is active - will roll to another\n     * slide\n     * @param slide\n     */\n    removeSlide(slide) {\n        const remIndex = this._slides.indexOf(slide);\n        if (this._currentActiveSlide === remIndex) {\n            // removing of active slide\n            let nextSlideIndex;\n            if (this._slides.length > 1) {\n                // if this slide last - will roll to first slide, if noWrap flag is\n                // FALSE or to previous, if noWrap is TRUE in case, if this slide in\n                // middle of collection, index of next slide is same to removed\n                nextSlideIndex = !this.isLast(remIndex)\n                    ? remIndex\n                    : this.noWrap ? remIndex - 1 : 0;\n            }\n            this._slides.remove(remIndex);\n            // prevents exception with changing some value after checking\n            setTimeout(() => {\n                this._select(nextSlideIndex);\n            }, 0);\n        }\n        else {\n            this._slides.remove(remIndex);\n            const currentSlideIndex = this.getCurrentSlideIndex();\n            setTimeout(() => {\n                // after removing, need to actualize index of current active slide\n                this._currentActiveSlide = currentSlideIndex;\n                this.activeSlideChange.emit(this._currentActiveSlide);\n            }, 0);\n        }\n    }\n    nextSlideFromInterval(force = false) {\n        this.move(Direction.NEXT, force);\n    }\n    /**\n     * Rolling to next slide\n     * @param force: {boolean} if true - will ignore noWrap flag\n     */\n    nextSlide(force = false) {\n        if (this.isPlaying) {\n            this.restartTimer();\n        }\n        this.move(Direction.NEXT, force);\n    }\n    /**\n     * Rolling to previous slide\n     * @param force: {boolean} if true - will ignore noWrap flag\n     */\n    previousSlide(force = false) {\n        if (this.isPlaying) {\n            this.restartTimer();\n        }\n        this.move(Direction.PREV, force);\n    }\n    getFirstVisibleIndex() {\n        return this.slides.findIndex(this.getActive);\n    }\n    getLastVisibleIndex() {\n        return findLastIndex(this.slides, this.getActive);\n    }\n    move(direction, force = false) {\n        const firstVisibleIndex = this.getFirstVisibleIndex();\n        const lastVisibleIndex = this.getLastVisibleIndex();\n        if (this.noWrap) {\n            if (direction === Direction.NEXT &&\n                this.isLast(lastVisibleIndex) ||\n                direction === Direction.PREV &&\n                    firstVisibleIndex === 0) {\n                return;\n            }\n        }\n        if (!this.multilist) {\n            this.activeSlide = this.findNextSlideIndex(direction, force) || 0;\n        }\n        else {\n            this.moveMultilist(direction);\n        }\n    }\n    /**\n     * Swith slides by enter, space and arrows keys\n     * @internal\n     */\n    keydownPress(event) {\n        if (event.keyCode === 13 || event.key === 'Enter' || event.keyCode === 32 || event.key === 'Space') {\n            this.nextSlide();\n            event.preventDefault();\n            return;\n        }\n        if (event.keyCode === 37 || event.key === 'LeftArrow') {\n            this.previousSlide();\n            return;\n        }\n        if (event.keyCode === 39 || event.key === 'RightArrow') {\n            this.nextSlide();\n            return;\n        }\n    }\n    /**\n     * Play on mouse leave\n     * @internal\n     */\n    onMouseLeave() {\n        if (!this.pauseOnFocus) {\n            this.play();\n        }\n    }\n    /**\n     * Play on mouse up\n     * @internal\n     */\n    onMouseUp() {\n        if (!this.pauseOnFocus) {\n            this.play();\n        }\n    }\n    /**\n     * When slides on focus autoplay is stopped(optional)\n     * @internal\n     */\n    pauseFocusIn() {\n        if (this.pauseOnFocus) {\n            this.isPlaying = false;\n            this.resetTimer();\n        }\n    }\n    /**\n     * When slides out of focus autoplay is started\n     * @internal\n     */\n    pauseFocusOut() {\n        this.play();\n    }\n    /**\n     * Rolling to specified slide\n     * @param index: {number} index of slide, which must be shown\n     */\n    selectSlide(index) {\n        if (this.isPlaying) {\n            this.restartTimer();\n        }\n        if (!this.multilist) {\n            this.activeSlide = this.indicatorsByChunk ? index * this.itemsPerSlide : index;\n        }\n        else {\n            this.selectSlideRange(this.indicatorsByChunk ? index * this.itemsPerSlide : index);\n        }\n    }\n    /**\n     * Starts a auto changing of slides\n     */\n    play() {\n        if (!this.isPlaying) {\n            this.isPlaying = true;\n            this.restartTimer();\n        }\n    }\n    /**\n     * Stops a auto changing of slides\n     */\n    pause() {\n        if (!this.noPause) {\n            this.isPlaying = false;\n            this.resetTimer();\n        }\n    }\n    /**\n     * Finds and returns index of currently displayed slide\n     */\n    getCurrentSlideIndex() {\n        return this._slides.findIndex(this.getActive);\n    }\n    /**\n     * Defines, whether the specified index is last in collection\n     * @param index\n     */\n    isLast(index) {\n        return index + 1 >= this._slides.length;\n    }\n    /**\n     * Defines, whether the specified index is first in collection\n     * @param index\n     */\n    isFirst(index) {\n        return index === 0;\n    }\n    indicatorsSlides() {\n        return this.slides.filter((slide, index) => !this.indicatorsByChunk || index % this.itemsPerSlide === 0);\n    }\n    selectInitialSlides() {\n        const startIndex = this.startFromIndex <= this._slides.length\n            ? this.startFromIndex\n            : 0;\n        this.hideSlides();\n        if (this.singleSlideOffset) {\n            this._slidesWithIndexes = this.mapSlidesAndIndexes();\n            if (this._slides.length - startIndex < this.itemsPerSlide) {\n                const slidesToAppend = this._slidesWithIndexes.slice(0, startIndex);\n                this._slidesWithIndexes = [\n                    ...this._slidesWithIndexes,\n                    ...slidesToAppend\n                ]\n                    .slice(slidesToAppend.length)\n                    .slice(0, this.itemsPerSlide);\n            }\n            else {\n                this._slidesWithIndexes = this._slidesWithIndexes.slice(startIndex, startIndex + this.itemsPerSlide);\n            }\n            this._slidesWithIndexes.forEach((slide) => slide.item.active = true);\n            this.makeSlidesConsistent(this._slidesWithIndexes);\n        }\n        else {\n            this.selectRangeByNestedIndex(startIndex);\n        }\n        this.slideRangeChange.emit(this.getVisibleIndexes());\n    }\n    /**\n     * Defines next slide index, depending of direction\n     * @param direction: Direction(UNKNOWN|PREV|NEXT)\n     * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\n     *   return undefined if next slide require wrapping\n     */\n    findNextSlideIndex(direction, force) {\n        let nextSlideIndex = 0;\n        if (!force &&\n            (this.isLast(this.activeSlide) &&\n                direction !== Direction.PREV &&\n                this.noWrap)) {\n            return;\n        }\n        switch (direction) {\n            case Direction.NEXT:\n                // if this is last slide, not force, looping is disabled\n                // and need to going forward - select current slide, as a next\n                if (typeof this._currentActiveSlide === 'undefined') {\n                    nextSlideIndex = 0;\n                    break;\n                }\n                if (!this.isLast(this._currentActiveSlide)) {\n                    nextSlideIndex = this._currentActiveSlide + 1;\n                    break;\n                }\n                nextSlideIndex = !force && this.noWrap ? this._currentActiveSlide : 0;\n                break;\n            case Direction.PREV:\n                // if this is first slide, not force, looping is disabled\n                // and need to going backward - select current slide, as a next\n                if (typeof this._currentActiveSlide === 'undefined') {\n                    nextSlideIndex = 0;\n                    break;\n                }\n                if (this._currentActiveSlide > 0) {\n                    nextSlideIndex = this._currentActiveSlide - 1;\n                    break;\n                }\n                if (!force && this.noWrap) {\n                    nextSlideIndex = this._currentActiveSlide;\n                    break;\n                }\n                nextSlideIndex = this._slides.length - 1;\n                break;\n            default:\n                throw new Error('Unknown direction');\n        }\n        return nextSlideIndex;\n    }\n    mapSlidesAndIndexes() {\n        return this.slides\n            .slice()\n            .map((slide, index) => {\n            return {\n                index,\n                item: slide\n            };\n        });\n    }\n    selectSlideRange(index) {\n        if (this.isIndexInRange(index)) {\n            return;\n        }\n        this.hideSlides();\n        if (!this.singleSlideOffset) {\n            this.selectRangeByNestedIndex(index);\n        }\n        else {\n            const startIndex = this.isIndexOnTheEdges(index)\n                ? index\n                : index - this.itemsPerSlide + 1;\n            const endIndex = this.isIndexOnTheEdges(index)\n                ? index + this.itemsPerSlide\n                : index + 1;\n            this._slidesWithIndexes = this.mapSlidesAndIndexes().slice(startIndex, endIndex);\n            this.makeSlidesConsistent(this._slidesWithIndexes);\n            this._slidesWithIndexes.forEach((slide) => slide.item.active = true);\n        }\n        this.slideRangeChange.emit(this.getVisibleIndexes());\n    }\n    selectRangeByNestedIndex(index) {\n        if (!this._chunkedSlides) {\n            return;\n        }\n        const selectedRange = this._chunkedSlides\n            .map((slidesList, i) => {\n            return {\n                index: i,\n                list: slidesList\n            };\n        })\n            .find((slidesList) => {\n            return slidesList.list.find(slide => slide.index === index) !== undefined;\n        });\n        if (!selectedRange) {\n            return;\n        }\n        this._currentVisibleSlidesIndex = selectedRange.index;\n        this._chunkedSlides[selectedRange.index].forEach((slide) => {\n            slide.item.active = true;\n        });\n    }\n    isIndexOnTheEdges(index) {\n        return (index + 1 - this.itemsPerSlide <= 0 ||\n            index + this.itemsPerSlide <= this._slides.length);\n    }\n    isIndexInRange(index) {\n        if (this.singleSlideOffset && this._slidesWithIndexes) {\n            const visibleIndexes = this._slidesWithIndexes.map((slide) => slide.index);\n            return visibleIndexes.indexOf(index) >= 0;\n        }\n        return (index <= this.getLastVisibleIndex() &&\n            index >= this.getFirstVisibleIndex());\n    }\n    hideSlides() {\n        this.slides.forEach((slide) => slide.active = false);\n    }\n    isVisibleSlideListLast() {\n        if (!this._chunkedSlides) {\n            return false;\n        }\n        return this._currentVisibleSlidesIndex === this._chunkedSlides.length - 1;\n    }\n    isVisibleSlideListFirst() {\n        return this._currentVisibleSlidesIndex === 0;\n    }\n    moveSliderByOneItem(direction) {\n        let firstVisibleIndex;\n        let lastVisibleIndex;\n        let indexToHide;\n        let indexToShow;\n        if (this.noWrap) {\n            firstVisibleIndex = this.getFirstVisibleIndex();\n            lastVisibleIndex = this.getLastVisibleIndex();\n            indexToHide = direction === Direction.NEXT\n                ? firstVisibleIndex\n                : lastVisibleIndex;\n            indexToShow = direction !== Direction.NEXT\n                ? firstVisibleIndex - 1\n                : !this.isLast(lastVisibleIndex)\n                    ? lastVisibleIndex + 1 : 0;\n            const slideToHide = this._slides.get(indexToHide);\n            if (slideToHide) {\n                slideToHide.active = false;\n            }\n            const slideToShow = this._slides.get(indexToShow);\n            if (slideToShow) {\n                slideToShow.active = true;\n            }\n            const slidesToReorder = this.mapSlidesAndIndexes().filter((slide) => slide.item.active);\n            this.makeSlidesConsistent(slidesToReorder);\n            if (this.singleSlideOffset) {\n                this._slidesWithIndexes = slidesToReorder;\n            }\n            this.slideRangeChange.emit(this.getVisibleIndexes());\n            return;\n        }\n        if (!this._slidesWithIndexes || !this._slidesWithIndexes[0]) {\n            return;\n        }\n        let index;\n        firstVisibleIndex = this._slidesWithIndexes[0].index;\n        lastVisibleIndex = this._slidesWithIndexes[this._slidesWithIndexes.length - 1].index;\n        if (direction === Direction.NEXT) {\n            this._slidesWithIndexes.shift();\n            index = this.isLast(lastVisibleIndex)\n                ? 0\n                : lastVisibleIndex + 1;\n            const item = this._slides.get(index);\n            if (item) {\n                this._slidesWithIndexes.push({ index, item });\n            }\n        }\n        else {\n            this._slidesWithIndexes.pop();\n            index = this.isFirst(firstVisibleIndex)\n                ? this._slides.length - 1\n                : firstVisibleIndex - 1;\n            const item = this._slides.get(index);\n            if (item) {\n                this._slidesWithIndexes = [{ index, item }, ...this._slidesWithIndexes];\n            }\n        }\n        this.hideSlides();\n        this._slidesWithIndexes.forEach(slide => slide.item.active = true);\n        this.makeSlidesConsistent(this._slidesWithIndexes);\n        this.slideRangeChange.emit(this._slidesWithIndexes.map((slide) => slide.index));\n    }\n    moveMultilist(direction) {\n        if (this.singleSlideOffset) {\n            this.moveSliderByOneItem(direction);\n        }\n        else {\n            this.hideSlides();\n            if (this.noWrap) {\n                this._currentVisibleSlidesIndex = direction === Direction.NEXT\n                    ? this._currentVisibleSlidesIndex + 1\n                    : this._currentVisibleSlidesIndex - 1;\n            }\n            else if (direction === Direction.NEXT) {\n                this._currentVisibleSlidesIndex = this.isVisibleSlideListLast()\n                    ? 0\n                    : this._currentVisibleSlidesIndex + 1;\n            }\n            else {\n                if (this.isVisibleSlideListFirst()) {\n                    this._currentVisibleSlidesIndex = this._chunkedSlides\n                        ? this._chunkedSlides.length - 1\n                        : 0;\n                }\n                else {\n                    this._currentVisibleSlidesIndex = this._currentVisibleSlidesIndex - 1;\n                }\n            }\n            if (this._chunkedSlides) {\n                this._chunkedSlides[this._currentVisibleSlidesIndex].forEach((slide) => slide.item.active = true);\n            }\n            this.slideRangeChange.emit(this.getVisibleIndexes());\n        }\n    }\n    getVisibleIndexes() {\n        if (!this.singleSlideOffset && this._chunkedSlides) {\n            return this._chunkedSlides[this._currentVisibleSlidesIndex]\n                .map((slide) => slide.index);\n        }\n        if (this._slidesWithIndexes) {\n            return this._slidesWithIndexes.map((slide) => slide.index);\n        }\n    }\n    /**\n     * Sets a slide, which specified through index, as active\n     * @param index\n     */\n    _select(index) {\n        if (isNaN(index)) {\n            this.pause();\n            return;\n        }\n        if (!this.multilist && typeof this._currentActiveSlide !== 'undefined') {\n            const currentSlide = this._slides.get(this._currentActiveSlide);\n            if (typeof currentSlide !== 'undefined') {\n                currentSlide.active = false;\n            }\n        }\n        const nextSlide = this._slides.get(index);\n        if (typeof nextSlide !== 'undefined') {\n            this._currentActiveSlide = index;\n            nextSlide.active = true;\n            this.activeSlide = index;\n            this.activeSlideChange.emit(index);\n        }\n    }\n    /**\n     * Starts loop of auto changing of slides\n     */\n    restartTimer() {\n        this.resetTimer();\n        const interval = +this.interval;\n        if (!isNaN(interval) && interval > 0 && isPlatformBrowser(this.platformId)) {\n            this.currentInterval = this.ngZone.runOutsideAngular(() => {\n                return window.setInterval(() => {\n                    const nInterval = +this.interval;\n                    this.ngZone.run(() => {\n                        if (this.isPlaying &&\n                            !isNaN(this.interval) &&\n                            nInterval > 0 &&\n                            this.slides.length) {\n                            this.nextSlideFromInterval();\n                        }\n                        else {\n                            this.pause();\n                        }\n                    });\n                }, interval);\n            });\n        }\n    }\n    get multilist() {\n        return this.itemsPerSlide > 1;\n    }\n    /**\n     * Stops loop of auto changing of slides\n     */\n    resetTimer() {\n        if (this.currentInterval) {\n            clearInterval(this.currentInterval);\n            this.currentInterval = void 0;\n        }\n    }\n    checkDisabledClass(buttonType) {\n        if (buttonType === 'prev') {\n            return (this.activeSlide === 0 && this.noWrap && !this.multilist) || (this.isFirstSlideVisible && this.noWrap && this.multilist);\n        }\n        return (this.isLast(this.activeSlide) && this.noWrap && !this.multilist) || (this.isLastSlideVisible && this.noWrap && this.multilist);\n    }\n}\nCarouselComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: CarouselComponent, deps: [{ token: CarouselConfig }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCarouselComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.3\", type: CarouselComponent, selector: \"carousel\", inputs: { noWrap: \"noWrap\", noPause: \"noPause\", showIndicators: \"showIndicators\", pauseOnFocus: \"pauseOnFocus\", indicatorsByChunk: \"indicatorsByChunk\", itemsPerSlide: \"itemsPerSlide\", singleSlideOffset: \"singleSlideOffset\", isAnimated: \"isAnimated\", activeSlide: \"activeSlide\", startFromIndex: \"startFromIndex\", interval: \"interval\" }, outputs: { activeSlideChange: \"activeSlideChange\", slideRangeChange: \"slideRangeChange\" }, ngImport: i0, template: \"<div (mouseenter)=\\\"pause()\\\"\\n     (mouseleave)=\\\"onMouseLeave()\\\"\\n     (mouseup)=\\\"onMouseUp()\\\"\\n     (keydown)=\\\"keydownPress($event)\\\"\\n     (focusin)=\\\"pauseFocusIn()\\\"\\n     (focusout)=\\\"pauseFocusOut()\\\"\\n     [id]=\\\"'carousel' + currentId\\\"\\n     class=\\\"carousel slide\\\" tabindex=\\\"0\\\">\\n  <ng-container *ngIf=\\\"!_bsVer.isBs5 && showIndicators && slides.length > 1\\\">\\n    <ol class=\\\"carousel-indicators\\\">\\n      <li *ngFor=\\\"let slide of indicatorsSlides(); let i = index;\\\"\\n          [class.active]=\\\"slide.active === true\\\"\\n          (click)=\\\"selectSlide(i)\\\">\\n      </li>\\n    </ol>\\n  </ng-container>\\n  <ng-container *ngIf=\\\"_bsVer.isBs5 && showIndicators && slides.length > 1\\\">\\n    <div class=\\\"carousel-indicators\\\">\\n      <button\\n        *ngFor=\\\"let slide of indicatorsSlides(); let i = index;\\\"\\n        [class.active]=\\\"slide.active === true\\\"\\n        (click)=\\\"selectSlide(i)\\\"\\n        type=\\\"button\\\"\\n        [attr.data-bs-target]=\\\"'#carousel' + currentId\\\"\\n        [attr.data-bs-slide-to]=\\\"i\\\" aria-current=\\\"true\\\"\\n      >\\n      </button>\\n    </div>\\n  </ng-container>\\n  <div class=\\\"carousel-inner\\\" [ngStyle]=\\\"{'display': multilist ? 'flex' : 'block'}\\\">\\n    <ng-content></ng-content>\\n  </div>\\n  <a class=\\\"left carousel-control carousel-control-prev\\\"\\n     href=\\\"javascript:void(0);\\\"\\n     [class.disabled]=\\\"checkDisabledClass('prev')\\\"\\n     [attr.data-bs-target]=\\\"'#carousel' + currentId\\\"\\n     *ngIf=\\\"slides.length > 1\\\"\\n     (click)=\\\"previousSlide()\\\"\\n     tabindex=\\\"0\\\" role=\\\"button\\\">\\n    <span class=\\\"icon-prev carousel-control-prev-icon\\\" aria-hidden=\\\"true\\\"></span>\\n    <span class=\\\"sr-only visually-hidden\\\">Previous</span>\\n  </a>\\n\\n  <a class=\\\"right carousel-control carousel-control-next\\\"\\n     href=\\\"javascript:void(0);\\\"\\n     *ngIf=\\\"slides.length > 1\\\"\\n     (click)=\\\"nextSlide()\\\"\\n     [class.disabled]=\\\"checkDisabledClass('next')\\\"\\n     [attr.data-bs-target]=\\\"'#carousel' + currentId\\\"\\n     tabindex=\\\"0\\\" role=\\\"button\\\">\\n    <span class=\\\"icon-next carousel-control-next-icon\\\" aria-hidden=\\\"true\\\"></span>\\n    <span class=\\\"sr-only visually-hidden\\\">Next</span>\\n  </a>\\n</div>\\n\", dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: CarouselComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'carousel', template: \"<div (mouseenter)=\\\"pause()\\\"\\n     (mouseleave)=\\\"onMouseLeave()\\\"\\n     (mouseup)=\\\"onMouseUp()\\\"\\n     (keydown)=\\\"keydownPress($event)\\\"\\n     (focusin)=\\\"pauseFocusIn()\\\"\\n     (focusout)=\\\"pauseFocusOut()\\\"\\n     [id]=\\\"'carousel' + currentId\\\"\\n     class=\\\"carousel slide\\\" tabindex=\\\"0\\\">\\n  <ng-container *ngIf=\\\"!_bsVer.isBs5 && showIndicators && slides.length > 1\\\">\\n    <ol class=\\\"carousel-indicators\\\">\\n      <li *ngFor=\\\"let slide of indicatorsSlides(); let i = index;\\\"\\n          [class.active]=\\\"slide.active === true\\\"\\n          (click)=\\\"selectSlide(i)\\\">\\n      </li>\\n    </ol>\\n  </ng-container>\\n  <ng-container *ngIf=\\\"_bsVer.isBs5 && showIndicators && slides.length > 1\\\">\\n    <div class=\\\"carousel-indicators\\\">\\n      <button\\n        *ngFor=\\\"let slide of indicatorsSlides(); let i = index;\\\"\\n        [class.active]=\\\"slide.active === true\\\"\\n        (click)=\\\"selectSlide(i)\\\"\\n        type=\\\"button\\\"\\n        [attr.data-bs-target]=\\\"'#carousel' + currentId\\\"\\n        [attr.data-bs-slide-to]=\\\"i\\\" aria-current=\\\"true\\\"\\n      >\\n      </button>\\n    </div>\\n  </ng-container>\\n  <div class=\\\"carousel-inner\\\" [ngStyle]=\\\"{'display': multilist ? 'flex' : 'block'}\\\">\\n    <ng-content></ng-content>\\n  </div>\\n  <a class=\\\"left carousel-control carousel-control-prev\\\"\\n     href=\\\"javascript:void(0);\\\"\\n     [class.disabled]=\\\"checkDisabledClass('prev')\\\"\\n     [attr.data-bs-target]=\\\"'#carousel' + currentId\\\"\\n     *ngIf=\\\"slides.length > 1\\\"\\n     (click)=\\\"previousSlide()\\\"\\n     tabindex=\\\"0\\\" role=\\\"button\\\">\\n    <span class=\\\"icon-prev carousel-control-prev-icon\\\" aria-hidden=\\\"true\\\"></span>\\n    <span class=\\\"sr-only visually-hidden\\\">Previous</span>\\n  </a>\\n\\n  <a class=\\\"right carousel-control carousel-control-next\\\"\\n     href=\\\"javascript:void(0);\\\"\\n     *ngIf=\\\"slides.length > 1\\\"\\n     (click)=\\\"nextSlide()\\\"\\n     [class.disabled]=\\\"checkDisabledClass('next')\\\"\\n     [attr.data-bs-target]=\\\"'#carousel' + currentId\\\"\\n     tabindex=\\\"0\\\" role=\\\"button\\\">\\n    <span class=\\\"icon-next carousel-control-next-icon\\\" aria-hidden=\\\"true\\\"></span>\\n    <span class=\\\"sr-only visually-hidden\\\">Next</span>\\n  </a>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: CarouselConfig }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { noWrap: [{\n                type: Input\n            }], noPause: [{\n                type: Input\n            }], showIndicators: [{\n                type: Input\n            }], pauseOnFocus: [{\n                type: Input\n            }], indicatorsByChunk: [{\n                type: Input\n            }], itemsPerSlide: [{\n                type: Input\n            }], singleSlideOffset: [{\n                type: Input\n            }], isAnimated: [{\n                type: Input\n            }], activeSlideChange: [{\n                type: Output\n            }], slideRangeChange: [{\n                type: Output\n            }], activeSlide: [{\n                type: Input\n            }], startFromIndex: [{\n                type: Input\n            }], interval: [{\n                type: Input\n            }] } });\n\nclass SlideComponent {\n    constructor(carousel) {\n        /** Is current slide active */\n        this.active = false;\n        this.itemWidth = '100%';\n        this.order = 0;\n        this.isAnimated = false;\n        /** Wraps element by appropriate CSS classes */\n        this.addClass = true;\n        this.multilist = false;\n        this.carousel = carousel;\n    }\n    /** Fires changes in container collection after adding a new slide instance */\n    ngOnInit() {\n        this.carousel.addSlide(this);\n        this.itemWidth = `${100 / this.carousel.itemsPerSlide}%`;\n        this.multilist = this.carousel?.itemsPerSlide > 1;\n    }\n    /** Fires changes in container collection after removing of this slide instance */\n    ngOnDestroy() {\n        this.carousel.removeSlide(this);\n    }\n}\nSlideComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SlideComponent, deps: [{ token: CarouselComponent }], target: i0.ɵɵFactoryTarget.Component });\nSlideComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.3\", type: SlideComponent, selector: \"slide\", inputs: { active: \"active\" }, host: { properties: { \"attr.aria-hidden\": \"!active\", \"class.multilist-margin\": \"multilist\", \"class.active\": \"this.active\", \"style.width\": \"this.itemWidth\", \"style.order\": \"this.order\", \"class.carousel-animation\": \"this.isAnimated\", \"class.item\": \"this.addClass\", \"class.carousel-item\": \"this.addClass\" } }, ngImport: i0, template: `\n    <div [class.active]=\"active\" class=\"item\">\n      <ng-content></ng-content>\n    </div>\n  `, isInline: true, styles: [\":host.carousel-animation{transition:opacity .6s ease,visibility .6s ease;float:left}:host.carousel-animation.active{opacity:1;visibility:visible}:host.carousel-animation:not(.active){display:block;position:absolute;opacity:0;visibility:hidden}:host.multilist-margin{margin-right:auto}:host.carousel-item{perspective:1000px}\\n\"] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: SlideComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'slide', template: `\n    <div [class.active]=\"active\" class=\"item\">\n      <ng-content></ng-content>\n    </div>\n  `, host: {\n                        '[attr.aria-hidden]': '!active',\n                        '[class.multilist-margin]': 'multilist'\n                    }, styles: [\":host.carousel-animation{transition:opacity .6s ease,visibility .6s ease;float:left}:host.carousel-animation.active{opacity:1;visibility:visible}:host.carousel-animation:not(.active){display:block;position:absolute;opacity:0;visibility:hidden}:host.multilist-margin{margin-right:auto}:host.carousel-item{perspective:1000px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: CarouselComponent }]; }, propDecorators: { active: [{\n                type: HostBinding,\n                args: ['class.active']\n            }, {\n                type: Input\n            }], itemWidth: [{\n                type: HostBinding,\n                args: ['style.width']\n            }], order: [{\n                type: HostBinding,\n                args: ['style.order']\n            }], isAnimated: [{\n                type: HostBinding,\n                args: ['class.carousel-animation']\n            }], addClass: [{\n                type: HostBinding,\n                args: ['class.item']\n            }, {\n                type: HostBinding,\n                args: ['class.carousel-item']\n            }] } });\n\nclass CarouselModule {\n    static forRoot() {\n        return { ngModule: CarouselModule, providers: [] };\n    }\n}\nCarouselModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: CarouselModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCarouselModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.3\", ngImport: i0, type: CarouselModule, declarations: [SlideComponent, CarouselComponent], imports: [CommonModule], exports: [SlideComponent, CarouselComponent] });\nCarouselModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: CarouselModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: CarouselModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [SlideComponent, CarouselComponent],\n                    exports: [SlideComponent, CarouselComponent]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CarouselComponent, CarouselConfig, CarouselModule, SlideComponent };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}