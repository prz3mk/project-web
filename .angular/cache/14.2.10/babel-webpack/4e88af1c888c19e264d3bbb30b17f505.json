{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/quesh/Desktop/trybus/web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../checkout.service\";\nimport * as i2 from \"src/app/basket/basket.service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/cdk/stepper\";\nconst _c0 = [\"cardNumber\"];\nconst _c1 = [\"cardExpiry\"];\nconst _c2 = [\"cardCvc\"];\n\nfunction CheckoutPaymentComponent_small_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" * \", ctx_r1.cardErrors, \" !\");\n  }\n}\n\nfunction CheckoutPaymentComponent_i_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 18);\n  }\n}\n\nexport class CheckoutPaymentComponent {\n  constructor(checkoutServices, basketServices, toastr, router) {\n    this.checkoutServices = checkoutServices;\n    this.basketServices = basketServices;\n    this.toastr = toastr;\n    this.router = router;\n    this.cardHandler = this.onChange.bind(this);\n    this.loading = false;\n    this.cardNumberValid = false;\n    this.cardExpiryValid = false;\n    this.cardCvcValid = false;\n  }\n\n  ngAfterViewInit() {\n    this.stripe = Stripe('pk_test_51MoCdXBxckbqGI9ystIlztLOEhIed9TT5CG2pnpczqt5mxSFTNYGvNArOBJ4ktbzcTxpRazefCqQkJqqmSiJukEJ00nkZjRoPx');\n    const elements = this.stripe.elements();\n    this.cardNumber = elements.create('cardNumber');\n    this.cardNumber.mount(this.cardNumberElement.nativeElement);\n    this.cardNumber.addEventListener('change', this.cardHandler);\n    this.cardExpiry = elements.create('cardExpiry');\n    this.cardExpiry.mount(this.cardExpiryElement.nativeElement);\n    this.cardExpiry.addEventListener('change', this.cardHandler);\n    this.cardCvc = elements.create('cardCvc');\n    this.cardCvc.mount(this.cardCvcElement.nativeElement);\n    this.cardCvc.addEventListener('change', this.cardHandler);\n  }\n\n  ngOnDestroy() {\n    this.cardNumber.destroy();\n    this.cardExpiry.destroy();\n    this.cardCvc.destroy();\n  }\n\n  onChange(event) {\n    console.log(event);\n\n    if (event.error) {\n      this.cardErrors = event.error.message;\n    } else {\n      this.cardErrors = null;\n    }\n\n    switch (event.elementType) {\n      case 'cardNumber':\n        this.cardNumberValid = event.complete;\n        break;\n\n      case 'cardExpiry':\n        this.cardExpiryValid = event.complete;\n        break;\n\n      case 'cardCvc':\n        this.cardCvcValid = event.complete;\n        break;\n    }\n  }\n\n  submitOrder() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.loading = true;\n\n      const basket = _this.basketServices.getCurrentBasketValue();\n\n      try {\n        const createOrder = yield _this.createOrder(basket);\n        const paymentResult = yield _this.confirmPaymentWithStripe(basket);\n\n        if (paymentResult.paymentIntent) {\n          _this.basketServices.deleteLocalBasekt(basket.id);\n\n          const navigationExtras = {\n            state: createOrder\n          };\n\n          _this.router.navigate(['checkout/success'], navigationExtras);\n        } else {\n          _this.toastr.error(paymentResult.error.message);\n        }\n\n        _this.loading = false;\n      } catch (error) {\n        console.error(error);\n        _this.loading = false;\n      } // this.checkoutServices.createOrder(orderToCreate).subscribe({\n      //   next: ((order: IOrder) => {\n      //     // this.toastr.success('Order Submit Succssfully!');\n      //     this.stripe.confirmCardPayment(basket.clientSecret, {\n      //       payment_method: {\n      //         card: this.cardNumber,\n      //         billing_details: {\n      //           name: this.checkoutForm.get('paymentForm').get('nameOnCard').value\n      //         }\n      //       }\n      //     }).then(result => {\n      //       console.log(result);\n      //       if (result.paymentIntent) {\n      //         this.basketServices.deleteLocalBasekt(basket.id);\n      //         const navigationExtras: NavigationExtras = { state: order }\n      //         this.router.navigate(['checkout/success'], navigationExtras)\n      //       } else {\n      //         this.toastr.error(result.error.message)\n      //       }\n      //     })\n      //   }),\n      //   error: ((err) => { this.toastr.error(err.message); console.error(err) })\n      // });\n\n    })();\n  }\n\n  confirmPaymentWithStripe(basket) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.stripe.confirmCardPayment(basket.clientSecret, {\n        payment_method: {\n          card: _this2.cardNumber,\n          billing_details: {\n            name: _this2.checkoutForm.get('paymentForm').get('nameOnCard').value\n          }\n        }\n      });\n    })();\n  }\n\n  createOrder(basket) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const orderToCreate = _this3.getOrderToCreate(basket);\n\n      return _this3.checkoutServices.createOrder(orderToCreate).toPromise();\n    })();\n  }\n\n  getOrderToCreate(basket) {\n    return {\n      basketId: basket.id,\n      deliveryMethodId: this.checkoutForm.get('deliveryForm.deliveryMethod').value,\n      shipToAddress: this.checkoutForm.get('addressForm').value\n    };\n  }\n\n}\n\nCheckoutPaymentComponent.ɵfac = function CheckoutPaymentComponent_Factory(t) {\n  return new (t || CheckoutPaymentComponent)(i0.ɵɵdirectiveInject(i1.CheckoutService), i0.ɵɵdirectiveInject(i2.BasketService), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.Router));\n};\n\nCheckoutPaymentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CheckoutPaymentComponent,\n  selectors: [[\"app-checkout-payment\"]],\n  viewQuery: function CheckoutPaymentComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n      i0.ɵɵviewQuery(_c1, 7);\n      i0.ɵɵviewQuery(_c2, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cardNumberElement = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cardExpiryElement = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cardCvcElement = _t.first);\n    }\n  },\n  inputs: {\n    checkoutForm: \"checkoutForm\"\n  },\n  decls: 26,\n  vars: 10,\n  consts: [[1, \"mt-5\", 3, \"formGroup\"], [1, \"row\"], [\"formGroupName\", \"paymentForm\", 1, \"form-group\", \"col-12\", \"mb-2\"], [1, \"form-floating\"], [\"type\", \"text\", \"formControlName\", \"nameOnCard\", \"placeholder\", \"name On card\", 1, \"form-control\"], [1, \"text-danger\", 2, \"font-weight\", \"bold\"], [1, \"form-group\", \"col-6\"], [1, \"form-control\", \"py-3\"], [\"cardNumber\", \"\"], [\"class\", \"text-danger\", \"style\", \"font-weight: bold;\", 4, \"ngIf\"], [1, \"form-group\", \"col-3\"], [\"cardExpiry\", \"\"], [\"cardCvc\", \"\"], [1, \"float-none\", \"d-flex\", \"justify-content-between\", \"flex-column\", \"flex-lg-row\", \"my-3\"], [\"cdkStepperPrevious\", \"\", 1, \"btn\", \"btn-outline-danger\"], [1, \"fa\", \"fa-angle-left\", \"mr-2\"], [\"cdkStepperNext\", \"\", 1, \"btn\", \"btn-danger\", 3, \"disabled\", \"click\"], [\"class\", \"fa fa-spinner fa-spin\", \"style\", \"color: black\", 4, \"ngIf\"], [1, \"fa\", \"fa-spinner\", \"fa-spin\", 2, \"color\", \"black\"]],\n  template: function CheckoutPaymentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵelement(4, \"input\", 4);\n      i0.ɵɵelementStart(5, \"small\", 5);\n      i0.ɵɵtext(6, \" * Name on Card Required !\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"label\");\n      i0.ɵɵtext(8, \"Name on Card\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(9, \"div\", 6);\n      i0.ɵɵelement(10, \"div\", 7, 8);\n      i0.ɵɵtemplate(12, CheckoutPaymentComponent_small_12_Template, 2, 1, \"small\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 10);\n      i0.ɵɵelement(14, \"div\", 7, 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 10);\n      i0.ɵɵelement(17, \"div\", 7, 12);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(19, \"div\", 13)(20, \"button\", 14)(21, \"i\", 15);\n      i0.ɵɵtext(22, \" Back to Review\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"button\", 16);\n      i0.ɵɵlistener(\"click\", function CheckoutPaymentComponent_Template_button_click_23_listener() {\n        return ctx.submitOrder();\n      });\n      i0.ɵɵtext(24, \" Submit Order \");\n      i0.ɵɵtemplate(25, CheckoutPaymentComponent_i_25_Template, 1, 0, \"i\", 17);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.checkoutForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵclassProp(\"is-invalid\", ctx.checkoutForm.get(\"paymentForm.nameOnCard\").invalid && ctx.checkoutForm.get(\"paymentForm.nameOnCard\").touched)(\"is-valid\", ctx.checkoutForm.get(\"paymentForm.nameOnCard\").valid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"d-none\", ctx.checkoutForm.get(\"paymentForm.nameOnCard\").valid || ctx.checkoutForm.get(\"paymentForm.nameOnCard\").untouched);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.cardErrors);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"disabled\", ctx.loading || ctx.checkoutForm.get(\"paymentForm\").invalid || !ctx.cardNumberValid || !ctx.cardExpiryValid || !ctx.cardCvcValid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading);\n    }\n  },\n  dependencies: [i5.NgIf, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.FormControlName, i6.FormGroupName, i7.CdkStepperNext, i7.CdkStepperPrevious],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjaGVja291dC1wYXltZW50LmNvbXBvbmVudC5zY3NzIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["ElementRef","i0","CheckoutPaymentComponent","constructor","checkoutServices","basketServices","toastr","router","onChange","bind","ngAfterViewInit","stripe","Stripe","elements","cardNumber","create","mount","cardNumberElement","nativeElement","addEventListener","cardHandler","cardExpiry","cardExpiryElement","cardCvc","cardCvcElement","ngOnDestroy","destroy","event","console","log","error","cardErrors","message","elementType","cardNumberValid","complete","cardExpiryValid","cardCvcValid","submitOrder","loading","basket","getCurrentBasketValue","createOrder","paymentResult","confirmPaymentWithStripe","paymentIntent","deleteLocalBasekt","id","navigationExtras","state","navigate","confirmCardPayment","clientSecret","payment_method","card","billing_details","name","checkoutForm","get","value","orderToCreate","getOrderToCreate","toPromise","basketId","deliveryMethodId","shipToAddress","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\quesh\\Desktop\\trybus\\web\\src\\app\\checkout\\checkout-payment\\checkout-payment.component.ts","C:\\Users\\quesh\\Desktop\\trybus\\web\\src\\app\\checkout\\checkout-payment\\checkout-payment.component.html"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { NavigationExtras, Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { BasketService } from 'src/app/basket/basket.service';\r\nimport { IBasket } from 'src/app/shared/Models/basket';\r\nimport { IOrder } from 'src/app/shared/Models/order';\r\nimport { CheckoutService } from '../checkout.service';\r\n\r\ndeclare var Stripe;\r\n@Component({\r\n  selector: 'app-checkout-payment',\r\n  templateUrl: './checkout-payment.component.html',\r\n  styleUrls: ['./checkout-payment.component.scss']\r\n})\r\nexport class CheckoutPaymentComponent implements AfterViewInit, OnDestroy {\r\n\r\n  @ViewChild('cardNumber', { static: true }) cardNumberElement: ElementRef;\r\n  @ViewChild('cardExpiry', { static: true }) cardExpiryElement: ElementRef;\r\n  @ViewChild('cardCvc', { static: true }) cardCvcElement: ElementRef;\r\n  stripe: any;\r\n  cardNumber: any;\r\n  cardExpiry: any;\r\n  cardCvc: any;\r\n  cardErrors: any;\r\n  cardHandler = this.onChange.bind(this);\r\n  loading: boolean = false;\r\n  cardNumberValid = false;\r\n  cardExpiryValid = false;\r\n  cardCvcValid = false;\r\n\r\n\r\n  @Input() checkoutForm: FormGroup;\r\n  constructor(private checkoutServices: CheckoutService, private basketServices: BasketService\r\n    , private toastr: ToastrService, private router: Router) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.stripe = Stripe('pk_test_51MoCdXBxckbqGI9ystIlztLOEhIed9TT5CG2pnpczqt5mxSFTNYGvNArOBJ4ktbzcTxpRazefCqQkJqqmSiJukEJ00nkZjRoPx');\r\n    const elements = this.stripe.elements();\r\n\r\n    this.cardNumber = elements.create('cardNumber');\r\n    this.cardNumber.mount(this.cardNumberElement.nativeElement);\r\n    this.cardNumber.addEventListener('change', this.cardHandler)\r\n\r\n    this.cardExpiry = elements.create('cardExpiry');\r\n    this.cardExpiry.mount(this.cardExpiryElement.nativeElement);\r\n    this.cardExpiry.addEventListener('change', this.cardHandler)\r\n\r\n    this.cardCvc = elements.create('cardCvc');\r\n    this.cardCvc.mount(this.cardCvcElement.nativeElement);\r\n    this.cardCvc.addEventListener('change', this.cardHandler)\r\n\r\n\r\n  }\r\n  ngOnDestroy() {\r\n    this.cardNumber.destroy();\r\n    this.cardExpiry.destroy();\r\n    this.cardCvc.destroy();\r\n  }\r\n  onChange(event) {\r\n    console.log(event);\r\n    if (event.error) {\r\n      this.cardErrors = event.error.message;\r\n    }\r\n    else {\r\n      this.cardErrors = null;\r\n    }\r\n    switch (event.elementType) {\r\n      case 'cardNumber':\r\n        this.cardNumberValid = event.complete;\r\n        break;\r\n      case 'cardExpiry':\r\n        this.cardExpiryValid = event.complete;\r\n        break;\r\n        case 'cardCvc':\r\n          this.cardCvcValid = event.complete;\r\n          break;\r\n  \r\n    }\r\n  }\r\n  async submitOrder() {\r\n    this.loading = true;\r\n    const basket = this.basketServices.getCurrentBasketValue();\r\n\r\n    try {\r\n      const createOrder = await this.createOrder(basket);\r\n      const paymentResult = await this.confirmPaymentWithStripe(basket);\r\n\r\n\r\n      if (paymentResult.paymentIntent) {\r\n        this.basketServices.deleteLocalBasekt(basket.id);\r\n        const navigationExtras: NavigationExtras = { state: createOrder }\r\n        this.router.navigate(['checkout/success'], navigationExtras)\r\n      } else {\r\n        this.toastr.error(paymentResult.error.message)\r\n      }\r\n      this.loading =false;\r\n    } catch (error) {\r\n      console.error(error);\r\n      this.loading =false;\r\n\r\n    }\r\n\r\n\r\n\r\n    // this.checkoutServices.createOrder(orderToCreate).subscribe({\r\n    //   next: ((order: IOrder) => {\r\n    //     // this.toastr.success('Order Submit Succssfully!');\r\n    //     this.stripe.confirmCardPayment(basket.clientSecret, {\r\n    //       payment_method: {\r\n    //         card: this.cardNumber,\r\n    //         billing_details: {\r\n    //           name: this.checkoutForm.get('paymentForm').get('nameOnCard').value\r\n    //         }\r\n    //       }\r\n    //     }).then(result => {\r\n    //       console.log(result);\r\n    //       if (result.paymentIntent) {\r\n    //         this.basketServices.deleteLocalBasekt(basket.id);\r\n    //         const navigationExtras: NavigationExtras = { state: order }\r\n    //         this.router.navigate(['checkout/success'], navigationExtras)\r\n    //       } else {\r\n    //         this.toastr.error(result.error.message)\r\n    //       }\r\n    //     })\r\n\r\n    //   }),\r\n    //   error: ((err) => { this.toastr.error(err.message); console.error(err) })\r\n    // });\r\n  }\r\n  private async confirmPaymentWithStripe(basket: IBasket) {\r\n    return this.stripe.confirmCardPayment(basket.clientSecret, {\r\n      payment_method: {\r\n        card: this.cardNumber,\r\n        billing_details: {\r\n          name: this.checkoutForm.get('paymentForm').get('nameOnCard').value\r\n        }\r\n      }\r\n    })\r\n  }\r\n  private async createOrder(basket: IBasket) {\r\n    const orderToCreate = this.getOrderToCreate(basket);\r\n    return this.checkoutServices.createOrder(orderToCreate).toPromise();\r\n  }\r\n  private getOrderToCreate(basket: IBasket) {\r\n    return {\r\n      basketId: basket.id,\r\n      deliveryMethodId: this.checkoutForm.get('deliveryForm.deliveryMethod').value,\r\n      shipToAddress: this.checkoutForm.get('addressForm').value\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"mt-5\" [formGroup]=\"checkoutForm\">\r\n    <div class=\"row\">\r\n        <div class=\"form-group col-12 mb-2\" formGroupName=\"paymentForm\">\r\n            <div class=\"form-floating\">\r\n                <input type=\"text\" formControlName=\"nameOnCard\" class=\"form-control\" placeholder=\"name On card\"\r\n                    [class.is-invalid]=\"checkoutForm.get('paymentForm.nameOnCard').invalid && checkoutForm.get('paymentForm.nameOnCard').touched\"\r\n                    [class.is-valid]=\"checkoutForm.get('paymentForm.nameOnCard').valid\">\r\n                <small class=\"text-danger\" style=\"font-weight: bold;\"\r\n                    [class.d-none]=\"checkoutForm.get('paymentForm.nameOnCard').valid || checkoutForm.get('paymentForm.nameOnCard').untouched\">\r\n                    * Name on Card Required !</small>\r\n\r\n                <label>Name on Card</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group col-6\">\r\n            <div #cardNumber class=\"form-control py-3\"></div>\r\n            <small *ngIf=\"cardErrors\" class=\"text-danger\" style=\"font-weight: bold;\"> * {{cardErrors}} !</small>\r\n        </div>\r\n        <div class=\"form-group col-3\">\r\n            <div #cardExpiry class=\"form-control py-3\"></div>\r\n        </div>\r\n        <div class=\"form-group col-3\">\r\n            <div #cardCvc class=\"form-control py-3\"></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"float-none d-flex justify-content-between flex-column flex-lg-row my-3\">\r\n    <button class=\"btn btn-outline-danger\" cdkStepperPrevious>\r\n        <i class=\"fa fa-angle-left mr-2\"> Back to Review</i>\r\n    </button>\r\n    <button [disabled]=\"loading || checkoutForm.get('paymentForm').invalid ||\r\n    !cardNumberValid ||\r\n    !cardExpiryValid ||\r\n    !cardCvcValid\r\n    \" (click)=\"submitOrder()\" class=\"btn btn-danger\" cdkStepperNext>\r\n        Submit Order\r\n        <i *ngIf=\"loading\" class=\"fa fa-spinner fa-spin\" style=\"color: black\"></i>\r\n    </button>\r\n</div>"]},"metadata":{},"sourceType":"module"}